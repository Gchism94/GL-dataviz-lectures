---
title: "Faculty Live Sessions"
subtitle: "INFO Data Visualization and Analysis"
institute: "UArizona School of Information"
author: "Dr. Greg Chism"
title-slide-attributes:
  data-background-image: minedata-bg.png
  data-background-size: 600px, cover
  data-slide-number: none
format:
  revealjs:
    theme: slides.scss
    transition: fade
    slide-number: true
    chalkboard: true
editor: visual
execute:
  freeze: auto
  echo: true
auto-stretch: false
jupyter: python3
---

# Time Series Visualizations

## Setup {.smaller}

```{python}
#| label: setup
#| message: false

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter
import matplotlib.dates as mdates
from skimpy import clean_columns

# Set the theme for seaborn
sns.set_theme(style="white", palette="colorblind")

# Set figure parameters
plt.rcParams['figure.figsize'] = [8, 8 * 0.618]
plt.rcParams['figure.autolayout'] = True

```

# Working with dates

## Air Quality Index

-   The AQI is the Environmental Protection Agency's index for reporting air quality

-   Higher values of AQI indicate worse air quality

![](images/aqi-levels.png){fig-align="center"}

::: aside
Source: <https://www.airnow.gov/aqi-basics>
:::

## AQI levels

The previous graphic in tabular form, to be used later...

```{python}
aqi_levels = pd.DataFrame({
    'aqi_min': [0, 51, 101, 151, 201, 301],
    'aqi_max': [50, 100, 150, 200, 300, 400],
    'color': ["#D8EEDA", "#F1E7D4", "#F8E4D8", "#FEE2E1", "#F4E3F7", "#F9D0D4"],
    'level': ["Good", "Moderate", "Unhealthy for sensitive groups", "Unhealthy", "Very unhealthy", "Hazardous"]
})

aqi_levels['aqi_mid'] = (aqi_levels['aqi_min'] + aqi_levels['aqi_max']) / 2

```

## AQI data

-   Source: [EPA's Daily Air Quality Tracker](https://www.epa.gov/outdoor-air-quality-data/air-data-daily-air-quality-tracker)

-   2016 - 2022 AQI (Ozone and PM2.5 combined) for Tucson, AZ core-based statistical area (CBSA), one file per year

-   2016 - 2022 AQI (Ozone and PM2.5 combined) for San Francisco-Oakland-Hayward, CA CBSA, one file per year

## 2022 Tucson, AZ {.smaller}

::: panel-tabset
## Read + head

```{python}
tuc_2022 = pd.read_csv("https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2022.csv")

tuc_2022 = clean_columns(tuc_2022)

tuc_2022.head()
```

## Info

```{python}
tuc_2022.info()
```

## Describe

```{python}
tuc_2022.describe()
```

## Missing values

```{python}
tuc_2022.isnull().sum()
```
:::

## First look {.smaller}

::: task
This plot looks quite bizarre. What might be going on?
:::

```{python}
sns.lineplot(data=tuc_2022, x='date', y='aqi_value')
plt.show()
```

## Transforming date {.smaller}

Using `pd.to_datatime()`:

```{python}
tuc_2022['date'] = pd.to_datetime(tuc_2022['date'], format='%m/%d/%Y')

print(tuc_2022.info())
```

## Investigating AQI values

-   Take a peek at distinct values of AQI

```{python}
# Check distinct values of aqi_value
distinct_aqi_values = tuc_2022['aqi_value'].unique()
print(distinct_aqi_values)
```

-   `"."` likely indicates `NA`, and it's causing the entire column to be read in as characters

## Rewind, and start over {.smaller}

```{python}
# Reload data with correct NA values
tuc_2022 = pd.read_csv("https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2022.csv", na_values=[".", ""])

# Clean and transform data again
tuc_2022 = clean_columns(tuc_2022)
tuc_2022['date'] = pd.to_datetime(tuc_2022['date'], format='%m/%d/%Y')

# Check the structure of the data
print(tuc_2022.info())
```

## Another look {.smaller}

```{python}
sns.lineplot(data=tuc_2022, x='date', y='aqi_value')
plt.show()
```

## Visualizing Tucson AQI 

```{python}
#| echo: false
# Plot background AQI levels
for _, row in aqi_levels.iterrows():
    plt.axhspan(row['aqi_min'], row['aqi_max'], color=row['color'], alpha=0.5, lw=0)

# Plot AQI values
sns.lineplot(data=tuc_2022.dropna(subset=['aqi_value']), x='date', y='aqi_value', linewidth=1.5, color="black")

# Annotate AQI levels
for _, row in aqi_levels.iterrows():
    plt.text(pd.Timestamp('2023-02-28'), row['aqi_mid'], row['level'], ha='right', size=14, color='gray', weight='bold')

# Additional annotations and formatting
plt.annotate('2022', xy=(pd.Timestamp('2022-01-01'), -100), size=12, ha='center')
plt.annotate('2023', xy=(pd.Timestamp('2023-03-01'), -100), size=12, ha='center')

plt.xlim(pd.Timestamp('2022-01-01'), pd.Timestamp('2023-03-01'))
plt.ylim(0, 400)
plt.xlabel(None)
plt.ylabel('AQI')
plt.title('Ozone and PM2.5 Daily AQI Values\nTucson, AZ')
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)
plt.gca().xaxis.set_major_formatter(DateFormatter('%b'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())

sns.despine()
plt.show()
```

## Live coding {.smaller}

```{python}
#| code-fold: true
#| code-summary: "Setup"
#| eval: false
aqi_levels = pd.DataFrame({
    'aqi_min': [0, 51, 101, 151, 201, 301],
    'aqi_max': [50, 100, 150, 200, 300, 400],
    'color': ["#D8EEDA", "#F1E7D4", "#F8E4D8", "#FEE2E1", "#F4E3F7", "#F9D0D4"],
    'level': ["Good", "Moderate", "Unhealthy for sensitive groups", "Unhealthy", "Very unhealthy", "Hazardous"]
})

tuc_2022 = pd.read_csv("https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2022.csv", na_values=[".", ""])

tuc_2022 = clean_columns(tuc_2022)
tuc_2022['date'] = pd.to_datetime(tuc_2022['date'], format='%m/%d/%Y')
```

Reveal below for code developed during live coding session.

```{python}
#| code-fold: true
#| eval: false

# Plot background AQI levels
for _, row in aqi_levels.iterrows():
    plt.axhspan(row['aqi_min'], row['aqi_max'], color=row['color'], alpha=0.5, lw=0)

# Plot AQI values
sns.lineplot(data=tuc_2022.dropna(subset=['aqi_value']), x='date', y='aqi_value', linewidth=1.5, color="black")

# Annotate AQI levels
for _, row in aqi_levels.iterrows():
    plt.text(pd.Timestamp('2023-02-28'), row['aqi_mid'], row['level'], ha='right', size=14, color='gray', weight='bold')

# Additional annotations and formatting
plt.annotate('2022', xy=(pd.Timestamp('2022-01-01'), -100), size=12, ha='center')
plt.annotate('2023', xy=(pd.Timestamp('2023-03-01'), -100), size=12, ha='center')

plt.xlim(pd.Timestamp('2022-01-01'), pd.Timestamp('2023-03-01'))
plt.ylim(0, 400)
plt.xlabel(None)
plt.ylabel('AQI')
plt.title('Ozone and PM2.5 Daily AQI Values\nTucson, AZ')
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)
plt.gca().xaxis.set_major_formatter(DateFormatter('%b'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())

sns.despine()
plt.show()
```

# Calculating cumulatives

## Cumulatives over time

-   When visualizing time series data, a somewhat common task is to calculate cumulatives over time and plot them

-   In our example we'll calculate the number of days with "good" AQI ($\le$ 50) and plot that value on the y-axis and the date on the x-axis


## Calculating cumulatives

Step 1. Arrange your data

```{python}
tuc_2022 = tuc_2022[['date', 'aqi_value']].dropna().sort_values('date')
```

## Calculating cumulatives

Step 2. Identify good days

```{python}
tuc_2022['good_aqi'] = np.where(tuc_2022['aqi_value'] <= 50, 1, 0)
```

## Calculating cumulatives

Step 3. Sum over time

```{python}
tuc_2022['cumsum_good_aqi'] = tuc_2022['good_aqi'].cumsum()
```

## Plotting cumulatives {.smaller}

::: panel-tabset
### Plot

```{python}
#| echo: false
#| fig.asp: 0.5
sns.lineplot(data=tuc_2022, x='date', y='cumsum_good_aqi')
plt.gca().xaxis.set_major_formatter(DateFormatter("%b %Y"))

plt.xlabel(None)
plt.ylabel("Number of days")
plt.title("Cumulative number of good AQI days (AQI < 50)\nTucson, AZ")
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)

sns.despine()

plt.show()
```

### Code

```{python}
#| eval: false
sns.lineplot(data=tuc_2022, x='date', y='cumsum_good_aqi')
plt.gca().xaxis.set_major_formatter(DateFormatter("%b %Y"))

plt.xlabel(None)
plt.ylabel("Number of days")
plt.title("Cumulative number of good AQI days (AQI < 50)\nTucson, AZ")
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)

sns.despine()

plt.show()
```
:::

# Detrending

## Detrending

-   Detrending is removing prominent long-term trend in time series to specifically highlight any notable deviations

-   Let's demonstrate using multiple years of AQI data

## Multiple years of Tucson, AZ data {.smaller}

```{python}
#| include: false
#| code-fold: true
tuc_files = ["https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2022.csv", "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2021.csv", "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2020.csv", "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2019.csv", "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2018.csv", "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2017.csv"]
```

## Reading multiple files {.smaller}

```{python}
#| message: false

# Define the list of URLs
tuc_files = [
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2022.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2021.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2020.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2019.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2018.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/tucson/ad_aqi_tracker_data-2017.csv"
]

# Initialize an empty dataframe
tuc = pd.DataFrame()

# Read and concatenate all data files
for file in tuc_files:
    data = pd.read_csv(file, na_values=[".", ""])
    tuc = pd.concat([tuc, data], ignore_index=True)

# Clean column names using the clean_columns function from the skimpy package
tuc = clean_columns(tuc)

# Clean and transform data
tuc['date'] = pd.to_datetime(tuc['date'], format='%m/%d/%Y')
tuc = tuc.dropna(subset=['aqi_value'])
tuc['good_aqi'] = np.where(tuc['aqi_value'] <= 50, 1, 0)
tuc = tuc.sort_values('date')
tuc['cumsum_good_aqi'] = tuc['good_aqi'].cumsum()

# Convert date to ordinal for regression
tuc['date_ordinal'] = tuc['date'].apply(lambda x: x.toordinal())

print(tuc.head())

```
## Simple Linear Regression

```{python}
from sklearn.linear_model import LinearRegression

# Fit linear regression for the trend line
model = LinearRegression()
model.fit(tuc[['date_ordinal']], tuc['cumsum_good_aqi'])
tuc['fitted'] = model.predict(tuc[['date_ordinal']])
```

## Plot trend since 2017 {.smaller}

::: panel-tabset
### Plot

```{python}
#| label: tuc-3
#| echo: false
#| fig-asp: 0.5
#| warning: false

sns.lineplot(data=tuc, x='date', y='cumsum_good_aqi', color = 'black')
sns.lineplot(data=tuc, x='date', y='fitted', color='pink', label='Trend Line')

plt.gca().xaxis.set_major_formatter(DateFormatter("%Y"))
plt.xlabel(None)
plt.ylabel("Number of days")
plt.title("Cumulative number of good AQI days (AQI < 50)\nTucson, AZ")
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)
sns.despine()
plt.show()
```

### Code

```{python}
#| eval: false
sns.lineplot(data=tuc, x='date', y='cumsum_good_aqi', color = 'black')
sns.lineplot(data=tuc, x='date', y='fitted', color='pink', label='Trend Line')

plt.gca().xaxis.set_major_formatter(DateFormatter("%Y"))
plt.xlabel(None)
plt.ylabel("Number of days")
plt.title("Cumulative number of good AQI days (AQI < 50)\nTucson, AZ")
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)
sns.despine()
plt.show()
```
:::

## Detrend

Step 1. Fit a simple linear regression

```{python}
# Convert dates to ordinal for regression
tuc['date_ordinal'] = tuc['date'].apply(lambda x: x.toordinal())

# Fit linear regression
model = LinearRegression()
model.fit(tuc[['date_ordinal']], tuc['cumsum_good_aqi'])

# Get fitted values
tuc['fitted'] = model.predict(tuc[['date_ordinal']])
```

## Detrend

Step 2. Divide the observed value of `cumsum_good_aqi` by the respective value in the long-term trend (i.e., `fitted`)

```{python}
tuc['ratio'] = tuc['cumsum_good_aqi'] / tuc['fitted']
```

## Visualize detrended data {.smaller}

::: panel-tabset
### Plot

```{python}
#| label: tuc-4
#| echo: false
#| fig-asp: 0.5
plt.axhline(y=1, color='gray')
sns.lineplot(data=tuc, x='date', y='ratio', color='black')
plt.gca().xaxis.set_major_formatter(DateFormatter("%Y"))
plt.ylim([0, 20])
plt.xlabel(None)
plt.ylabel("Number of days\n(detrended)")
plt.title("Cumulative number of good AQI days (AQI < 50)\nTucson, AZ (2016-2022)")
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)
sns.despine()
plt.show()
```

### Code

```{python}
#| eval: false
plt.axhline(y=1, color='gray')
sns.lineplot(data=tuc, x='date', y='ratio', color='black')
plt.gca().xaxis.set_major_formatter(DateFormatter("%Y"))
plt.ylim([0, 20])
plt.xlabel(None)
plt.ylabel("Number of days\n(detrended)")
plt.title("Cumulative number of good AQI days (AQI < 50)\nTucson, AZ (2016-2022)")
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)
sns.despine()
plt.show()
```
:::

## Air Quality in Tucson

<br><br>

::: hand
barely anything interesting happening!
:::

. . .

::: hand
let's look at data from somewhere with a bit more "interesting" air quality data...
:::

## Read in multiple years of SF data {.smaller}

```{python}
#| code-fold: true

# Define the list of URLs
sf_files = [
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/san-francisco/ad_aqi_tracker_data-2022.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/san-francisco/ad_aqi_tracker_data-2021.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/san-francisco/ad_aqi_tracker_data-2020.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/san-francisco/ad_aqi_tracker_data-2019.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/san-francisco/ad_aqi_tracker_data-2018.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/san-francisco/ad_aqi_tracker_data-2017.csv",
    "https://raw.githubusercontent.com/Gchism94/GL-dataviz-lectures/main/slides/data/san-francisco/ad_aqi_tracker_data-2016.csv"
]

# Initialize an empty dataframe
sf = pd.DataFrame()

# Read and concatenate all data files
for file in sf_files:
    data = pd.read_csv(file, na_values=[".", ""])
    sf = pd.concat([sf, data], ignore_index=True)

# Clean column names using the clean_columns function from the skimpy package
sf = clean_columns(sf)

# Clean and transform data
sf['date'] = pd.to_datetime(sf['date'], format='%m/%d/%Y')
sf = sf.dropna(subset=['aqi_value'])
sf['good_aqi'] = np.where(sf['aqi_value'] <= 50, 1, 0)
sf = sf.sort_values('date')
sf['cumsum_good_aqi'] = sf['good_aqi'].cumsum()

# Convert date to ordinal for regression
sf['date_ordinal'] = sf['date'].apply(lambda x: x.toordinal())

print(sf.head())

```

## Simple Linear Regression

```{python}
# Fit linear regression for the trend line
model = LinearRegression()
model.fit(sf[['date_ordinal']], sf['cumsum_good_aqi'])
sf['fitted'] = model.predict(sf[['date_ordinal']])
```


## Plot trend since 2016 {.smaller}

::: panel-tabset
### Plot

```{python}
#| label: sf-1
#| echo: false
#| fig-asp: 0.5
#| warning: false

sns.lineplot(data=sf, x='date', y='cumsum_good_aqi', color = 'black')
sns.lineplot(data=sf, x='date', y='fitted', color='pink', label='Trend Line')

plt.gca().xaxis.set_major_formatter(DateFormatter("%Y"))
plt.xlabel(None)
plt.ylabel("Number of days")
plt.title("Cumulative number of good AQI days (AQI < 50)\nSan Francisco, CA")
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)
sns.despine()
plt.show()
```

### Code

```{python}
#| eval: false
sns.lineplot(data=sf, x='date', y='cumsum_good_aqi', color = 'black')
sns.lineplot(data=sf, x='date', y='fitted', color='pink', label='Trend Line')

plt.gca().xaxis.set_major_formatter(DateFormatter("%Y"))
plt.xlabel(None)
plt.ylabel("Number of days")
plt.title("Cumulative number of good AQI days (AQI < 50)\nSan Francisco, CA")
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)
sns.despine()
plt.show()
```
:::

## Detrend

Step 1. Fit a simple linear regression

```{python}
# Convert dates to ordinal for regression
sf['date_ordinal'] = sf['date'].apply(lambda x: x.toordinal())

# Fit linear regression
model = LinearRegression()
model.fit(sf[['date_ordinal']], sf['cumsum_good_aqi'])

# Get fitted values
sf['fitted'] = model.predict(sf[['date_ordinal']])
```

## Detrend

Step 2. Divide the observed value of `cumsum_good_aqi` by the respective value in the long-term trend (i.e., `fitted`)

```{python}
sf['ratio'] = sf['cumsum_good_aqi'] / sf['fitted']
```

## Visualize detrended data {.smaller}

::: panel-tabset
### Plot

```{python}
#| label: sf-2
#| echo: false
#| fig-asp: 0.5
plt.axhline(y=1, color='gray')
sns.lineplot(data=sf, x='date', y='ratio', color='black')
plt.gca().xaxis.set_major_formatter(DateFormatter("%Y"))
plt.xlabel(None)
plt.ylabel("Number of days\n(detrended)")
plt.title("Cumulative number of good AQI days (AQI < 50)\nSan Francisco, CA (2016-2022)")
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)
sns.despine()
plt.show()
```

### Code

```{python}
#| eval: false
plt.axhline(y=1, color='gray')
sns.lineplot(data=sf, x='date', y='ratio', color='black')
plt.gca().xaxis.set_major_formatter(DateFormatter("%Y"))
plt.xlabel(None)
plt.ylabel("Number of days\n(detrended)")
plt.title("Cumulative number of good AQI days (AQI < 50)\nSan Francisco, CA (2016-2022)")
plt.figtext(0.5, -0.1, 'Source: EPA Daily Air Quality Tracker', ha='center', size=10)
sns.despine()
plt.show()
```
:::

## Detrending

-   In step 2 we fit a very simple model

-   Depending on the complexity you're trying to capture you might choose to fit a much more complex model

-   You can also decompose the trend into multiple trends, e.g. monthly, long-term, seasonal, etc.

# Highlighting

## Data prep {.smaller}

::: columns
::: {.column width="50%"}
```{python}
from datetime import datetime

sf['year'] = sf['date'].dt.year
sf['day_of_year'] = sf['date'].dt.dayofyear
```
:::

::: {.column width="50%"}
```{python}
# check
print(sf[sf['day_of_year'] < 3])
```
:::
:::

## Plot AQI over years {.smaller}

```{python}
sns.lineplot(data=sf, x='day_of_year', y='aqi_value', hue='year', palette='tab10', legend=False)
plt.xlabel('Day of year')
plt.ylabel('AQI value')
plt.title('AQI levels in San Francisco (2016 - 2022)')
plt.show()
```

## Highlight specific year (2016) {.smaller}

```{python}
#| code-fold: true
# Highlight the year 2016
sns.lineplot(data=sf, x='day_of_year', y='aqi_value', color='gray')
sns.lineplot(data=sf[sf['year'] == 2016], x='day_of_year', y='aqi_value', color='red')
plt.xlabel('Day of year')
plt.ylabel('AQI value')
plt.title('AQI levels in SF in 2016\nVersus all years 2016 - 2022')
plt.show()
```

## Highlight specific year (2017) {.smaller}

```{python}
#| code-fold: true
# Highlight the year 2017
sns.lineplot(data=sf, x='day_of_year', y='aqi_value', color='gray')
sns.lineplot(data=sf[sf['year'] == 2017], x='day_of_year', y='aqi_value', color='red')
plt.xlabel('Day of year')
plt.ylabel('AQI value')
plt.title('AQI levels in SF in 2016\nVersus all years 2016 - 2022')
plt.show()
```

## Highlight specific year (2018) {.smaller}

```{python}
#| code-fold: true
# Highlight the year 2018
sns.lineplot(data=sf, x='day_of_year', y='aqi_value', color='gray')
sns.lineplot(data=sf[sf['year'] == 2018], x='day_of_year', y='aqi_value', color='red')
plt.xlabel('Day of year')
plt.ylabel('AQI value')
plt.title('AQI levels in SF in 2016\nVersus all years 2016 - 2022')
plt.show()
```

## Highlight any year {.smaller}

```{python}
#| code-fold: true
# Function to highlight a specific year
def highlight_year(year_to_highlight):
    sns.lineplot(data=sf, x='day_of_year', y='aqi_value', color='gray')
    sns.lineplot(data=sf[sf['year'] == year_to_highlight], x='day_of_year', y='aqi_value', color='red')
    plt.xlabel('Day of year')
    plt.ylabel('AQI value')
    plt.title(f'AQI levels in SF in {year_to_highlight}\nVersus all years 2016 - 2022')
    plt.show()

# Highlight any year
highlight_year(2018)
```

# Thank you 😊