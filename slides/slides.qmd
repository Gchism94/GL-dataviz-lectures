---
title: Data Visualization
subtitle: ResBaz Arizona 2024
institute: "UArizona School of Information"
author: "Dr. Greg Chism"
title-slide-attributes:
  data-background-image: minedata-bg.png
  data-background-size: 600px, cover
  data-slide-number: none
logo: "./logo.png"
format:
  revealjs:
    theme: slides.scss
    transition: fade
    slide-number: true
    chalkboard: true
editor: visual
execute:
  freeze: auto
  echo: true
auto-stretch: false
filters:
  - pyodide
---

```{python}
#| echo: false
#| output: false
!pip install micropip
import micropip
micropip.install("seaborn")
import seaborn as sns
```

## Setup

```{pyodide-python}
#| label: setup
#| message: false
await micropip.install([
  "seaborn",
  "setuptools" # dependency
])
# Import all required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import random
import statsmodels.api as sm

# Increase font size of all Seaborn plot elements
sns.set(font_scale = 1.25)

# Set seed
random.seed(123)
```

## Data visualization

> The practice of [designing](https://en.wikipedia.org/wiki/Design "Design") and creating easy-to-communicate and easy-to-understand [graphic](https://en.wikipedia.org/wiki/Graphics "Graphics") or visual [representations](https://en.wikipedia.org/wiki/Representation_(arts) "Representation (arts)") of a large amount of complex quantitative and qualitative [data](https://en.wikipedia.org/wiki/Data "Data") and [information](https://en.wikipedia.org/wiki/Information "Information") with the help of static, dynamic or interactive visual items.

::: fragment
My definition: telling a story with your data, visually.
:::

## Why storytelling? {.smaller}

::: columns
::: {.column width="50%"}
![](images/gilgamesh-1.png){fig-align="center" width="678"}
:::

::: {.column width="50%"}
![](images/gilgamesh-2.jpeg){fig-align="center" width="266"}
:::
:::

::: fragment
::: incremental
-   **Epic of Gilgamesh** (c. 2100 BC)

-   First known "hero's journey"

-   **Goal**: Apply storytelling to your visuals
:::
:::

## **Aircraft-Wildlife Collisions**

::: columns
::: {.column width="50%"}
<br>

![](images/plane-birds.jpeg){fig-align="center"}
:::

::: {.column width="50%"}
![](images/plane-birds-1.webp){fig-align="center" width="450"}
:::
:::

## Aircraft-Wildlife Collisions {.smaller}

```{pyodide-python}
birds = pd.read_csv("slides/data/birds.csv")
birds['date'] = pd.to_datetime(birds['date'])
```

::: panel-tabset
## Head

```{pyodide-python}
birds.head()
```

## Info

```{pyodide-python}
birds.info()
```

## Describe

```{pyodide-python}
birds.describe().round(2)
```
:::

## [{seaborn}](https://seaborn.pydata.org/index.html)

> Seaborn is a Python data visualization library based on [matplotlib](https://matplotlib.org/). It provides a high-level interface for drawing attractive and informative statistical graphics.

![](images/seaborn.png){fig-align="center"}

## Some data viz rules

::: incremental
-   ALWAYS make custom titles (axes, legends)

-   Use color blind friendly [color palettes](https://seaborn.pydata.org/tutorial/color_palettes.html)

-   Use either the `whitegrid` or `white` [themes](https://seaborn.pydata.org/tutorial/aesthetics.html)

-   Don't clutter with unnecessary information

-   Use annotations to aid the reader

-   Use the **Golden Ratio**: 0.625, or 8in/5in
:::

# Exploratory visuals

## How to choose a plot

::: {style="text-align: center;"}
```{=html}
<iframe width="1000" height="500" src="https://www.data-to-viz.com/" frameborder="1" style="background:white;"></iframe>
```
:::

## One Numeric Variable

::: columns
::: {.column width="50%" style="text-align: center;"}
**Histogram**

![](images/Histogram.png){fig-align="center" width="75"}

::: fragment
::: {.incremental style="text-align: left;"}
-   Frequency Distribution
-   Easy to Interpret
-   Identifies Patterns
:::
:::
:::

::: {.column width="50%" style="text-align: center;"}
**Density Plot**

![](images/Density.png){fig-align="center" width="75"}

::: fragment
::: {.incremental style="text-align: left;"}
-   Smooth Distribution Curve
-   Highlights Density
-   Comparative Analysis
:::
:::
:::
:::

## Histograms {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-6|1,2|4,6
import seaborn as sns
import matplotlib.pyplot as plt

sns.displot(data = birds, x = "speed")

plt.show()
```

## Histograms: bins {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-4|2
sns.displot(data = birds, x = "speed", 
            bins = 15, height = 5, aspect = 8/5)

plt.show()
```

## Density Plot {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-4|2
sns.displot(data = birds, x = "speed", 
            kind = 'kde', height = 5, aspect = 8/5)

plt.show()
```

## Two Numeric Variables

::: columns
::: {.column width="50%" style="text-align: center;"}
**Scatterplot**

![](images/ScatterPlot.png){fig-align="center" width="100"}

::: fragment
::: {.incremental style="text-align: left;"}
-   Relationship Visualization
-   Outlier Identification
-   Pattern Recognition
:::
:::
:::

::: {.column width="50%" style="text-align: center;"}
**2D Density Plot**

![](images/2dDensity.png){fig-align="center" width="100"}

::: fragment
::: {.incremental style="text-align: left;"}
-   Density Distributions
-   Combine Contour and Color
-   Complex Data Interpretation
:::
:::
:::
:::

## Scatterplots {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-5|3

sns.set_theme(style = "whitegrid")

sns.scatterplot(data = birds, x = "speed", y = "height")

plt.show()
```

## Scatterplots - color {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-6|4

sns.set_theme(style = "whitegrid")

sns.scatterplot(data = birds, x = "speed", y = "height",
                hue = "sky")

plt.show()
```

## Scatterplots - size + color {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-6|4

sns.set_theme(style = "whitegrid")

sns.scatterplot(data = birds, x = "speed", y = "height",
                size = "num_engs", hue = "ac_mass")

plt.show()
```

## Scatterplots - linear relationships {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-4|1
sns.lmplot(data = birds, x = "speed", y = "height",
           aspect = 8/5)

plt.show()
```

## Scatterplots - grouped relationships {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-4|1
sns.lmplot(data = birds, x = "speed", y = "height",
           hue = "num_engs", aspect = 8/5)

plt.show()
```

## 2D Density Plots {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-4|2
sns.histplot(data = birds, x = "speed", y = "height", 
             bins = 50, pthresh = 0.1, cmap = "mako")

plt.show()
```

## 2D Density plots: contours {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-4|1,2
sns.kdeplot(data = birds, x = "speed", y = np.log(birds['height'] + 1), 
             thresh = 0.1, hue = "sky", palette = "colorblind")

plt.show()
```

## 2D Density plots: filled contours {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-4|1,2
sns.kdeplot(data = birds, x = "speed", y = np.log(birds['height'] + 1), 
             thresh = 0, cmap = "mako", fill = True, levels = 10)

plt.show()
```

## Two Ordered Numeric Variables

::: columns
::: {.column width="50%" style="text-align: center;"}
**Line Plot**

![](images/Line.png){fig-align="center" width="100"}

::: fragment
::: {.incremental style="text-align: left;"}
-   Trend Identification
-   Simple and Clear
-   Comparative Analysis
:::
:::
:::

::: {.column width="50%" style="text-align: center;"}
**Area Plot**

![](images/Area.png){fig-align="center" width="100"}

::: fragment
::: {.incremental style="text-align: left;"}
-   Cumulative Representation
-   Emphasizes Volume
-   Layered Comparisons
:::
:::
:::
:::

## Line Plot {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-6|3
sns.set_theme(style = "whitegrid")

sns.lineplot(data = birds, x = "date", y = "speed")

plt.show()
```

## Line Plot: grouped lines

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-4|2
sns.lineplot(data = birds, x = "date", y = "speed",
             hue = "sky")

plt.show()
```

## One Categorical

::: columns
::: {.column width="50%" style="text-align: center;"}
**Barplot**

![](images/Bar.png){fig-align="center" width="100"}

::: fragment
::: {.incremental style="text-align: left;"}
-   Categorical Comparison
-   Clear Visualization
-   Versatile Use
:::
:::
:::

::: {.column width="50%" style="text-align: center;"}
**Pie Chart**

![](images/Pie.png){fig-align="center" width="100"}

::: fragment
::: {.incremental style="text-align: left;"}
-   Proportional Representation
-   Simple Interpretation
-   Visual Appeal
:::
:::
:::
:::

## Barplot {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-6|3

sns.set_theme(style = "white")

sns.countplot(data = birds, x = "sky", 
              palette = "colorblind")
              
plt.show()
```

## Pie Chart {.smaller}

Can't use {seaborn}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-9|1|3-5|7
category_counts = birds['sky'].value_counts()

plt.pie(category_counts, labels = category_counts.index, 
        autopct = lambda p: f'{p:.1f}%', 
        textprops = {'size':14})

plt.axis('equal')

plt.show()
```

## One Numerical + One Categorical

::: columns
::: {.column width="50%" style="text-align: center;"}
**Boxplot**

![](images/box.png){fig-align="center" width="100"}

::: fragment
::: {.incremental style="text-align: left;"}
-   Displays Quartiles
-   Identifies Outliers
-   Comparative Analysis
:::
:::
:::

::: {.column width="50%" style="text-align: center;"}
**Violin chart**

![](images/Violin.png){fig-align="center" width="100"}

::: fragment
::: {.incremental style="text-align: left;"}
-   Density Representation
-   Richer Data Insight
-   Visualizes Data Spread
:::
:::
:::
:::

## Boxplots {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-6|1|3,4
sns.set_style("whitegrid")

sns.boxplot(data = birds, x = "speed", y = "sky",
            hue = "sky", palette = "colorblind")

plt.show()
```

## Trim axes {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-8|6

sns.set_style("whitegrid")

p1 = sns.boxplot(data = birds, x = "speed", y = "sky",
                 hue = "sky", palette = "colorblind")

p1.set_xlim(0, 250)

plt.show()
```

## Violin Plots {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-6|3,4

sns.set_style("white")

sns.violinplot(data = birds, x = "speed", y = "sky", hue = "sky",
                    palette = "colorblind")
               
plt.show()
```

## Violin Plots: paired {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-10|3,5|7
sns.set_style("white")

options = ['Night', 'Day']

birds_filt = birds[birds['time_of_day'].isin(options)]

sns.violinplot(data = birds_filt, x = "speed", y = "sky", hue = "time_of_day",
                    palette = "colorblind")
               
plt.show()
```

## Violin Plots: quartiles + split {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-7|5
sns.set_style("white")

sns.violinplot(data = birds_filt, x = "speed", y = "sky", hue = "time_of_day",
                    palette = "colorblind",
                    inner = "quart", split = True)
               
plt.show()
```

## Cleaning up our plots {.smaller}

#### **My minimum expectation:**

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-11|6-9
sns.set_style("white")

g1 = sns.violinplot(data = birds_filt, x = "speed", y = "sky", hue = "time_of_day",
                    palette = "colorblind")

g1.set(xlabel = "Speed (mph)")
g1.set(ylabel = None)
g1.set(title = "Speed of plane collisions with birds")
g1.legend(title = "Time of day")

plt.show()
```

## Aside: Correlations {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-16|3|5|7|9,11|13,14
sns.set_theme(style = "white")

birds_num = birds.select_dtypes(include = 'number')

corr = birds_num.corr()

mask = np.triu(np.ones_like(corr, dtype = bool))

f, ax = plt.subplots(figsize = (8, 6))

cmap = sns.diverging_palette(230, 20, as_cmap = True)

sns.heatmap(corr, mask = mask, cmap = cmap, vmax = 0.5, center = 0,
            square = True, linewidths = .5, cbar_kws = {"shrink": 0.5})
            
plt.show()
```

## Lastly: Pairgrids {.smaller}

```{pyodide-python}
#| code-fold: true
#| code-line-numbers: 1-11|3|5-9|
sns.set_theme(style = "white")

birds_sub = birds[['ac_mass', 'height', 'speed', 'sky']]

g = sns.PairGrid(birds_sub, diag_sharey = False, 
                 height = 2, hue = "sky")
g.map_upper(sns.scatterplot, s = 15)
g.map_lower(sns.kdeplot)
g.map_diag(sns.kdeplot, lw = 2)

plt.show()
```

## Diwali sales data: metadata {.smaller}

| **variable**     | **class** | **description**                               |
|------------------|------------------|-------------------------------------|
| User_ID          | double    | User identification number                    |
| Cust_name        | character | Customer name                                 |
| Product_ID       | character | Product identification number                 |
| Gender           | character | Gender of the customer (e.g. Male, Female)    |
| Age Group        | character | Age group of the customer                     |
| Age              | double    | Age of the customer                           |
| Marital_Status   | double    | Marital status of customer (Married, Single)  |
| State            | character | State of the customer                         |
| Zone             | character | Geographic zone of the customer               |
| Occupation       | character | Occupation of the customer                    |
| Product_Category | character | Category of the product                       |
| Orders           | double    | Number of orders made by the customer         |
| Amount           | double    | Amount in Indian rupees spent by the customer |

## Livecoding: Diwali sales data {.smaller}

::: panel-tabset
## Read in

```{pyodide-python}
diwali = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-11-14/diwali_sales_data.csv', encoding = 'iso-8859-1')
diwali.head()
```

## Code

```{pyodide-python}
#| code-fold: true
#| eval: false
# Examine data
diwali.info()

# Data types
diwali.dtypes

# Describe numerical columns
diwali.describe()

# Describe categories
diwali.describe(exclude = [np.number])

# Unique levels
categorical_cols = diwali.select_dtypes(include = ['object', 'category']).columns
unique_levels = diwali[col].unique()

# Outliers
# Make a copy of the diwali data 
dataCopy = diwali.copy()

# Select only numerical columns
dataRed = dataCopy.select_dtypes(include = np.number)

# List of numerical columns
dataRedColsList = dataRed.columns[...]

# For all values in the numerical column list from above
for i_col in dataRedColsList:
  # List of the values in i_col
  dataRed_i = dataRed.loc[:,i_col]
  
  # Define the 25th and 75th percentiles
  q25, q75 = round((dataRed_i.quantile(q = 0.25)), 3), round((dataRed_i.quantile(q = 0.75)), 3)
  
  # Define the interquartile range from the 25th and 75th percentiles defined above
  IQR = round((q75 - q25), 3)
  
  # Calculate the outlier cutoff 
  cut_off = IQR * 1.5
  
  # Define lower and upper cut-offs
  lower, upper = round((q25 - cut_off), 3), round((q75 + cut_off), 3)
  
  # Print the values
  print(' ')
  
  # For each value of i_col, print the 25th and 75th percentiles and IQR
  print(i_col, 'q25 =', q25, 'q75 =', q75, 'IQR =', IQR)
  
  # Print the lower and upper cut-offs
  print('lower, upper:', lower, upper)

  # Count the number of outliers outside the (lower, upper) limits, print that value
  print('Number of Outliers: ', dataRed_i[(dataRed_i < lower) | (dataRed_i > upper)].count())

# Missing values
diwali.isnull().sum()

# Normality - qq plot
# Change theme to "white"
sns.set_style("white")

# Make a copy of the data 
dataCopy = diwali.copy()

# Remove NAs
dataCopyFin = dataCopy.dropna()

# Specify desired column
i_col = dataCopyFin.Amount

# Subplots
fig, (ax1, ax2) = plt.subplots(ncols = 2, nrows = 1)

# Density plot
sns.kdeplot(i_col, linewidth = 5, ax = ax1)
ax1.set_title('Amount spent (₹)')

# Q-Q plot
sm.qqplot(i_col, line = 's', ax = ax2)
ax2.set_title('Amount spent Q-Q plot')
plt.tight_layout()
plt.show()
```
:::
